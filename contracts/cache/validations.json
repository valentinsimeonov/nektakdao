{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:51",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)26_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(AccessControlStorage)36_storage": {
              "label": "struct AccessControlUpgradeable.AccessControlStorage",
              "members": [
                {
                  "label": "_roles",
                  "type": "t_mapping(t_bytes32,t_struct(RoleData)26_storage)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)2017_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)26_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)26_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)2017_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)153_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:GovernorUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:31",
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:NoncesUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol:DoubleEndedQueue",
          "@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol:SignatureChecker",
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "()",
          "supportsInterface(bytes4)",
          "name()",
          "version()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "getProposalId(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalThreshold()",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "proposalProposer(uint256)",
          "proposalEta(uint256)",
          "proposalNeedsQueuing(uint256)",
          "propose(address[],uint256[],bytes[],string)",
          "queue(address[],uint256[],bytes[],bytes32)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "cancel(address[],uint256[],bytes[],bytes32)",
          "getVotes(address,uint256)",
          "getVotesWithParams(address,uint256,bytes)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteWithReasonAndParams(uint256,uint8,string,bytes)",
          "castVoteBySig(uint256,uint8,address,bytes)",
          "castVoteWithReasonAndParamsBySig(uint256,uint8,address,string,bytes,bytes)",
          "relay(address,uint256,bytes)",
          "onERC721Received(address,address,uint256,bytes)",
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "clock()",
          "CLOCK_MODE()",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint128,t_bytes32)": {
              "label": "mapping(uint128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)278_storage)": {
              "label": "mapping(uint256 => struct GovernorUpgradeable.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)6014_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_uint128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(EIP712Storage)2666_storage": {
              "label": "struct EIP712Upgradeable.EIP712Storage",
              "members": [
                {
                  "label": "_hashedName",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_hashedVersion",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_version",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(GovernorStorage)310_storage": {
              "label": "struct GovernorUpgradeable.GovernorStorage",
              "members": [
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_proposals",
                  "type": "t_mapping(t_uint256,t_struct(ProposalCore)278_storage)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_governanceCall",
                  "type": "t_struct(Bytes32Deque)6014_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(InitializableStorage)2017_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(NoncesStorage)2599_storage": {
              "label": "struct NoncesUpgradeable.NoncesStorage",
              "members": [
                {
                  "label": "_nonces",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ProposalCore)278_storage": {
              "label": "struct GovernorUpgradeable.ProposalCore",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voteStart",
                  "type": "t_uint48",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "voteDuration",
                  "type": "t_uint32",
                  "offset": 26,
                  "slot": "0"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 30,
                  "slot": "0"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 31,
                  "slot": "0"
                },
                {
                  "label": "etaSeconds",
                  "type": "t_uint48",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint48": {
              "label": "uint48",
              "numberOfBytes": "6"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Governor": [
              {
                "contract": "GovernorUpgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:53",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "GovernorUpgradeable",
                "label": "_proposals",
                "type": "t_mapping(t_uint256,t_struct(ProposalCore)278_storage)",
                "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:55",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "GovernorUpgradeable",
                "label": "_governanceCall",
                "type": "t_struct(Bytes32Deque)6014_storage",
                "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:61",
                "offset": 0,
                "slot": "2"
              }
            ],
            "erc7201:openzeppelin.storage.Nonces": [
              {
                "contract": "NoncesUpgradeable",
                "label": "_nonces",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:17",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:38",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43",
                "offset": 0,
                "slot": "3"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/governance/TimelockControllerUpgradeable.sol:TimelockControllerUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/governance/TimelockControllerUpgradeable.sol:26",
        "version": {
          "withMetadata": "693627afbbdb755318b42475729c01743673d8e9824aad3a488872e1a2dfc9df",
          "withoutMetadata": "1489127af2959657c0c00f90200f5d7d9998ad37cdefbcc151ca8d8ebf11cb21",
          "linkedWithoutMetadata": "1489127af2959657c0c00f90200f5d7d9998ad37cdefbcc151ca8d8ebf11cb21"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:ERC1155HolderUpgradeable",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol:ERC721HolderUpgradeable",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [
          "initialize(uint256,address[],address[],address)",
          "()",
          "supportsInterface(bytes4)",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getOperationState(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)26_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AccessControlStorage)36_storage": {
              "label": "struct AccessControlUpgradeable.AccessControlStorage",
              "members": [
                {
                  "label": "_roles",
                  "type": "t_mapping(t_bytes32,t_struct(RoleData)26_storage)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)2017_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)26_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(TimelockControllerStorage)946_storage": {
              "label": "struct TimelockControllerUpgradeable.TimelockControllerStorage",
              "members": [
                {
                  "label": "_timestamps",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_minDelay",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.TimelockController": [
              {
                "contract": "TimelockControllerUpgradeable",
                "label": "_timestamps",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/governance/TimelockControllerUpgradeable.sol:34",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "TimelockControllerUpgradeable",
                "label": "_minDelay",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/governance/TimelockControllerUpgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)26_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorCountingSimpleUpgradeable.sol:GovernorCountingSimpleUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorCountingSimpleUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:GovernorUpgradeable",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:NoncesUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "COUNTING_MODE()",
          "hasVoted(uint256,address)",
          "proposalVotes(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint128,t_bytes32)": {
              "label": "mapping(uint128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)278_storage)": {
              "label": "mapping(uint256 => struct GovernorUpgradeable.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalVote)1256_storage)": {
              "label": "mapping(uint256 => struct GovernorCountingSimpleUpgradeable.ProposalVote)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)6014_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_uint128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(EIP712Storage)2666_storage": {
              "label": "struct EIP712Upgradeable.EIP712Storage",
              "members": [
                {
                  "label": "_hashedName",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_hashedVersion",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_version",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(GovernorCountingSimpleStorage)1263_storage": {
              "label": "struct GovernorCountingSimpleUpgradeable.GovernorCountingSimpleStorage",
              "members": [
                {
                  "label": "_proposalVotes",
                  "type": "t_mapping(t_uint256,t_struct(ProposalVote)1256_storage)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(GovernorStorage)310_storage": {
              "label": "struct GovernorUpgradeable.GovernorStorage",
              "members": [
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_proposals",
                  "type": "t_mapping(t_uint256,t_struct(ProposalCore)278_storage)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_governanceCall",
                  "type": "t_struct(Bytes32Deque)6014_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(InitializableStorage)2017_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(NoncesStorage)2599_storage": {
              "label": "struct NoncesUpgradeable.NoncesStorage",
              "members": [
                {
                  "label": "_nonces",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ProposalCore)278_storage": {
              "label": "struct GovernorUpgradeable.ProposalCore",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voteStart",
                  "type": "t_uint48",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "voteDuration",
                  "type": "t_uint32",
                  "offset": 26,
                  "slot": "0"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 30,
                  "slot": "0"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 31,
                  "slot": "0"
                },
                {
                  "label": "etaSeconds",
                  "type": "t_uint48",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalVote)1256_storage": {
              "label": "struct GovernorCountingSimpleUpgradeable.ProposalVote",
              "members": [
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "hasVoted",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint48": {
              "label": "uint48",
              "numberOfBytes": "6"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.GovernorCountingSimple": [
              {
                "contract": "GovernorCountingSimpleUpgradeable",
                "label": "_proposalVotes",
                "type": "t_mapping(t_uint256,t_struct(ProposalVote)1256_storage)",
                "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorCountingSimpleUpgradeable.sol:32",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Governor": [
              {
                "contract": "GovernorUpgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:53",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "GovernorUpgradeable",
                "label": "_proposals",
                "type": "t_mapping(t_uint256,t_struct(ProposalCore)278_storage)",
                "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:55",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "GovernorUpgradeable",
                "label": "_governanceCall",
                "type": "t_struct(Bytes32Deque)6014_storage",
                "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:61",
                "offset": 0,
                "slot": "2"
              }
            ],
            "erc7201:openzeppelin.storage.Nonces": [
              {
                "contract": "NoncesUpgradeable",
                "label": "_nonces",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:17",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:38",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43",
                "offset": 0,
                "slot": "3"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorSettingsUpgradeable.sol:GovernorSettingsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorSettingsUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:GovernorUpgradeable",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:NoncesUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "votingDelay()",
          "votingPeriod()",
          "proposalThreshold()",
          "setVotingDelay(uint48)",
          "setVotingPeriod(uint32)",
          "setProposalThreshold(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint128,t_bytes32)": {
              "label": "mapping(uint128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)278_storage)": {
              "label": "mapping(uint256 => struct GovernorUpgradeable.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)6014_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_uint128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(EIP712Storage)2666_storage": {
              "label": "struct EIP712Upgradeable.EIP712Storage",
              "members": [
                {
                  "label": "_hashedName",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_hashedVersion",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_version",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(GovernorSettingsStorage)1361_storage": {
              "label": "struct GovernorSettingsUpgradeable.GovernorSettingsStorage",
              "members": [
                {
                  "label": "_proposalThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_votingDelay",
                  "type": "t_uint48",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_votingPeriod",
                  "type": "t_uint32",
                  "offset": 6,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(GovernorStorage)310_storage": {
              "label": "struct GovernorUpgradeable.GovernorStorage",
              "members": [
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_proposals",
                  "type": "t_mapping(t_uint256,t_struct(ProposalCore)278_storage)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_governanceCall",
                  "type": "t_struct(Bytes32Deque)6014_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(InitializableStorage)2017_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(NoncesStorage)2599_storage": {
              "label": "struct NoncesUpgradeable.NoncesStorage",
              "members": [
                {
                  "label": "_nonces",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ProposalCore)278_storage": {
              "label": "struct GovernorUpgradeable.ProposalCore",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voteStart",
                  "type": "t_uint48",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "voteDuration",
                  "type": "t_uint32",
                  "offset": 26,
                  "slot": "0"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 30,
                  "slot": "0"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 31,
                  "slot": "0"
                },
                {
                  "label": "etaSeconds",
                  "type": "t_uint48",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint48": {
              "label": "uint48",
              "numberOfBytes": "6"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.GovernorSettings": [
              {
                "contract": "GovernorSettingsUpgradeable",
                "label": "_proposalThreshold",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorSettingsUpgradeable.sol:17",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "GovernorSettingsUpgradeable",
                "label": "_votingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorSettingsUpgradeable.sol:19",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "GovernorSettingsUpgradeable",
                "label": "_votingPeriod",
                "type": "t_uint32",
                "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorSettingsUpgradeable.sol:21",
                "offset": 6,
                "slot": "1"
              }
            ],
            "erc7201:openzeppelin.storage.Governor": [
              {
                "contract": "GovernorUpgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:53",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "GovernorUpgradeable",
                "label": "_proposals",
                "type": "t_mapping(t_uint256,t_struct(ProposalCore)278_storage)",
                "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:55",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "GovernorUpgradeable",
                "label": "_governanceCall",
                "type": "t_struct(Bytes32Deque)6014_storage",
                "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:61",
                "offset": 0,
                "slot": "2"
              }
            ],
            "erc7201:openzeppelin.storage.Nonces": [
              {
                "contract": "NoncesUpgradeable",
                "label": "_nonces",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:17",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:38",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43",
                "offset": 0,
                "slot": "3"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorTimelockControlUpgradeable.sol:GovernorTimelockControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorTimelockControlUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:GovernorUpgradeable",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:NoncesUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [
          "state(uint256)",
          "timelock()",
          "proposalNeedsQueuing(uint256)",
          "updateTimelock(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(TimelockControllerUpgradeable)1229": {
              "label": "contract TimelockControllerUpgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint128,t_bytes32)": {
              "label": "mapping(uint128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)278_storage)": {
              "label": "mapping(uint256 => struct GovernorUpgradeable.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)6014_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_uint128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(EIP712Storage)2666_storage": {
              "label": "struct EIP712Upgradeable.EIP712Storage",
              "members": [
                {
                  "label": "_hashedName",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_hashedVersion",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_version",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(GovernorStorage)310_storage": {
              "label": "struct GovernorUpgradeable.GovernorStorage",
              "members": [
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_proposals",
                  "type": "t_mapping(t_uint256,t_struct(ProposalCore)278_storage)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_governanceCall",
                  "type": "t_struct(Bytes32Deque)6014_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(GovernorTimelockControlStorage)1471_storage": {
              "label": "struct GovernorTimelockControlUpgradeable.GovernorTimelockControlStorage",
              "members": [
                {
                  "label": "_timelock",
                  "type": "t_contract(TimelockControllerUpgradeable)1229",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_timelockIds",
                  "type": "t_mapping(t_uint256,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(InitializableStorage)2017_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(NoncesStorage)2599_storage": {
              "label": "struct NoncesUpgradeable.NoncesStorage",
              "members": [
                {
                  "label": "_nonces",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ProposalCore)278_storage": {
              "label": "struct GovernorUpgradeable.ProposalCore",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voteStart",
                  "type": "t_uint48",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "voteDuration",
                  "type": "t_uint32",
                  "offset": 26,
                  "slot": "0"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 30,
                  "slot": "0"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 31,
                  "slot": "0"
                },
                {
                  "label": "etaSeconds",
                  "type": "t_uint48",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint48": {
              "label": "uint48",
              "numberOfBytes": "6"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.GovernorTimelockControl": [
              {
                "contract": "GovernorTimelockControlUpgradeable",
                "label": "_timelock",
                "type": "t_contract(TimelockControllerUpgradeable)1229",
                "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorTimelockControlUpgradeable.sol:29",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "GovernorTimelockControlUpgradeable",
                "label": "_timelockIds",
                "type": "t_mapping(t_uint256,t_bytes32)",
                "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorTimelockControlUpgradeable.sol:30",
                "offset": 0,
                "slot": "1"
              }
            ],
            "erc7201:openzeppelin.storage.Governor": [
              {
                "contract": "GovernorUpgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:53",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "GovernorUpgradeable",
                "label": "_proposals",
                "type": "t_mapping(t_uint256,t_struct(ProposalCore)278_storage)",
                "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:55",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "GovernorUpgradeable",
                "label": "_governanceCall",
                "type": "t_struct(Bytes32Deque)6014_storage",
                "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:61",
                "offset": 0,
                "slot": "2"
              }
            ],
            "erc7201:openzeppelin.storage.Nonces": [
              {
                "contract": "NoncesUpgradeable",
                "label": "_nonces",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:17",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:38",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43",
                "offset": 0,
                "slot": "3"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesQuorumFractionUpgradeable.sol:GovernorVotesQuorumFractionUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesQuorumFractionUpgradeable.sol:16",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesUpgradeable.sol:GovernorVotesUpgradeable",
          "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:GovernorUpgradeable",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:NoncesUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/Checkpoints.sol:Checkpoints",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [
          "quorumNumerator()",
          "quorumNumerator(uint256)",
          "quorumDenominator()",
          "quorum(uint256)",
          "updateQuorumNumerator(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Checkpoint208)5689_storage)dyn_storage": {
              "label": "struct Checkpoints.Checkpoint208[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC5805)3273": {
              "label": "contract IERC5805",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint128,t_bytes32)": {
              "label": "mapping(uint128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)278_storage)": {
              "label": "mapping(uint256 => struct GovernorUpgradeable.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)6014_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_uint128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Checkpoint208)5689_storage": {
              "label": "struct Checkpoints.Checkpoint208",
              "members": [
                {
                  "label": "_key",
                  "type": "t_uint48",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_uint208",
                  "offset": 6,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(EIP712Storage)2666_storage": {
              "label": "struct EIP712Upgradeable.EIP712Storage",
              "members": [
                {
                  "label": "_hashedName",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_hashedVersion",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_version",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(GovernorStorage)310_storage": {
              "label": "struct GovernorUpgradeable.GovernorStorage",
              "members": [
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_proposals",
                  "type": "t_mapping(t_uint256,t_struct(ProposalCore)278_storage)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_governanceCall",
                  "type": "t_struct(Bytes32Deque)6014_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(GovernorVotesQuorumFractionStorage)1623_storage": {
              "label": "struct GovernorVotesQuorumFractionUpgradeable.GovernorVotesQuorumFractionStorage",
              "members": [
                {
                  "label": "_quorumNumeratorHistory",
                  "type": "t_struct(Trace208)5684_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(GovernorVotesStorage)1716_storage": {
              "label": "struct GovernorVotesUpgradeable.GovernorVotesStorage",
              "members": [
                {
                  "label": "_token",
                  "type": "t_contract(IERC5805)3273",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)2017_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(NoncesStorage)2599_storage": {
              "label": "struct NoncesUpgradeable.NoncesStorage",
              "members": [
                {
                  "label": "_nonces",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ProposalCore)278_storage": {
              "label": "struct GovernorUpgradeable.ProposalCore",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voteStart",
                  "type": "t_uint48",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "voteDuration",
                  "type": "t_uint32",
                  "offset": 26,
                  "slot": "0"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 30,
                  "slot": "0"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 31,
                  "slot": "0"
                },
                {
                  "label": "etaSeconds",
                  "type": "t_uint48",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Trace208)5684_storage": {
              "label": "struct Checkpoints.Trace208",
              "members": [
                {
                  "label": "_checkpoints",
                  "type": "t_array(t_struct(Checkpoint208)5689_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint208": {
              "label": "uint208",
              "numberOfBytes": "26"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint48": {
              "label": "uint48",
              "numberOfBytes": "6"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.GovernorVotesQuorumFraction": [
              {
                "contract": "GovernorVotesQuorumFractionUpgradeable",
                "label": "_quorumNumeratorHistory",
                "type": "t_struct(Trace208)5684_storage",
                "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesQuorumFractionUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.GovernorVotes": [
              {
                "contract": "GovernorVotesUpgradeable",
                "label": "_token",
                "type": "t_contract(IERC5805)3273",
                "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesUpgradeable.sol:19",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Governor": [
              {
                "contract": "GovernorUpgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:53",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "GovernorUpgradeable",
                "label": "_proposals",
                "type": "t_mapping(t_uint256,t_struct(ProposalCore)278_storage)",
                "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:55",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "GovernorUpgradeable",
                "label": "_governanceCall",
                "type": "t_struct(Bytes32Deque)6014_storage",
                "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:61",
                "offset": 0,
                "slot": "2"
              }
            ],
            "erc7201:openzeppelin.storage.Nonces": [
              {
                "contract": "NoncesUpgradeable",
                "label": "_nonces",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:17",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:38",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43",
                "offset": 0,
                "slot": "3"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesUpgradeable.sol:GovernorVotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesUpgradeable.sol:16",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:GovernorUpgradeable",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:NoncesUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/types/Time.sol:Time"
        ],
        "methods": [
          "token()",
          "clock()",
          "CLOCK_MODE()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC5805)3273": {
              "label": "contract IERC5805",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint128,t_bytes32)": {
              "label": "mapping(uint128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)278_storage)": {
              "label": "mapping(uint256 => struct GovernorUpgradeable.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)6014_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_uint128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(EIP712Storage)2666_storage": {
              "label": "struct EIP712Upgradeable.EIP712Storage",
              "members": [
                {
                  "label": "_hashedName",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_hashedVersion",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_version",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(GovernorStorage)310_storage": {
              "label": "struct GovernorUpgradeable.GovernorStorage",
              "members": [
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_proposals",
                  "type": "t_mapping(t_uint256,t_struct(ProposalCore)278_storage)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_governanceCall",
                  "type": "t_struct(Bytes32Deque)6014_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(GovernorVotesStorage)1716_storage": {
              "label": "struct GovernorVotesUpgradeable.GovernorVotesStorage",
              "members": [
                {
                  "label": "_token",
                  "type": "t_contract(IERC5805)3273",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)2017_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(NoncesStorage)2599_storage": {
              "label": "struct NoncesUpgradeable.NoncesStorage",
              "members": [
                {
                  "label": "_nonces",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ProposalCore)278_storage": {
              "label": "struct GovernorUpgradeable.ProposalCore",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voteStart",
                  "type": "t_uint48",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "voteDuration",
                  "type": "t_uint32",
                  "offset": 26,
                  "slot": "0"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 30,
                  "slot": "0"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 31,
                  "slot": "0"
                },
                {
                  "label": "etaSeconds",
                  "type": "t_uint48",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint48": {
              "label": "uint48",
              "numberOfBytes": "6"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.GovernorVotes": [
              {
                "contract": "GovernorVotesUpgradeable",
                "label": "_token",
                "type": "t_contract(IERC5805)3273",
                "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesUpgradeable.sol:19",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Governor": [
              {
                "contract": "GovernorUpgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:53",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "GovernorUpgradeable",
                "label": "_proposals",
                "type": "t_mapping(t_uint256,t_struct(ProposalCore)278_storage)",
                "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:55",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "GovernorUpgradeable",
                "label": "_governanceCall",
                "type": "t_struct(Bytes32Deque)6014_storage",
                "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:61",
                "offset": 0,
                "slot": "2"
              }
            ],
            "erc7201:openzeppelin.storage.Nonces": [
              {
                "contract": "NoncesUpgradeable",
                "label": "_nonces",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:17",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:38",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43",
                "offset": 0,
                "slot": "3"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/governance/utils/VotesUpgradeable.sol:VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/governance/utils/VotesUpgradeable.sol:33",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5805.sol:IERC5805",
          "@openzeppelin/contracts/governance/utils/IVotes.sol:IVotes",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:NoncesUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/Checkpoints.sol:Checkpoints",
          "@openzeppelin/contracts/utils/types/Time.sol:Time",
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA"
        ],
        "methods": [
          "clock()",
          "CLOCK_MODE()",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Checkpoint208)5689_storage)dyn_storage": {
              "label": "struct Checkpoints.Checkpoint208[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Trace208)5684_storage)": {
              "label": "mapping(address => struct Checkpoints.Trace208)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint208)5689_storage": {
              "label": "struct Checkpoints.Checkpoint208",
              "members": [
                {
                  "label": "_key",
                  "type": "t_uint48",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_uint208",
                  "offset": 6,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(EIP712Storage)2666_storage": {
              "label": "struct EIP712Upgradeable.EIP712Storage",
              "members": [
                {
                  "label": "_hashedName",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_hashedVersion",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_version",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(InitializableStorage)2017_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(NoncesStorage)2599_storage": {
              "label": "struct NoncesUpgradeable.NoncesStorage",
              "members": [
                {
                  "label": "_nonces",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Trace208)5684_storage": {
              "label": "struct Checkpoints.Trace208",
              "members": [
                {
                  "label": "_checkpoints",
                  "type": "t_array(t_struct(Checkpoint208)5689_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(VotesStorage)1822_storage": {
              "label": "struct VotesUpgradeable.VotesStorage",
              "members": [
                {
                  "label": "_delegatee",
                  "type": "t_mapping(t_address,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_delegateCheckpoints",
                  "type": "t_mapping(t_address,t_struct(Trace208)5684_storage)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalCheckpoints",
                  "type": "t_struct(Trace208)5684_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint208": {
              "label": "uint208",
              "numberOfBytes": "26"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint48": {
              "label": "uint48",
              "numberOfBytes": "6"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Votes": [
              {
                "contract": "VotesUpgradeable",
                "label": "_delegatee",
                "type": "t_mapping(t_address,t_address)",
                "src": "@openzeppelin/contracts-upgradeable/governance/utils/VotesUpgradeable.sol:41",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "VotesUpgradeable",
                "label": "_delegateCheckpoints",
                "type": "t_mapping(t_address,t_struct(Trace208)5684_storage)",
                "src": "@openzeppelin/contracts-upgradeable/governance/utils/VotesUpgradeable.sol:43",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "VotesUpgradeable",
                "label": "_totalCheckpoints",
                "type": "t_struct(Trace208)5684_storage",
                "src": "@openzeppelin/contracts-upgradeable/governance/utils/VotesUpgradeable.sol:45",
                "offset": 0,
                "slot": "2"
              }
            ],
            "erc7201:openzeppelin.storage.Nonces": [
              {
                "contract": "NoncesUpgradeable",
                "label": "_nonces",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:17",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:38",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43",
                "offset": 0,
                "slot": "3"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)2017_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "proxiableUUID()",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)2017_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:ERC1155HolderUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)2017_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)2233_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)2017_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:NoncesUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(EIP712Storage)2666_storage": {
              "label": "struct EIP712Upgradeable.EIP712Storage",
              "members": [
                {
                  "label": "_hashedName",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_hashedVersion",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_version",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(ERC20Storage)2233_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)2017_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(NoncesStorage)2599_storage": {
              "label": "struct NoncesUpgradeable.NoncesStorage",
              "members": [
                {
                  "label": "_nonces",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Nonces": [
              {
                "contract": "NoncesUpgradeable",
                "label": "_nonces",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:17",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:38",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43",
                "offset": 0,
                "slot": "3"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:24",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/governance/utils/VotesUpgradeable.sol:VotesUpgradeable",
          "@openzeppelin/contracts/interfaces/IERC5805.sol:IERC5805",
          "@openzeppelin/contracts/governance/utils/IVotes.sol:IVotes",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:NoncesUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "numCheckpoints(address)",
          "checkpoints(address,uint32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Checkpoint208)5689_storage)dyn_storage": {
              "label": "struct Checkpoints.Checkpoint208[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Trace208)5684_storage)": {
              "label": "mapping(address => struct Checkpoints.Trace208)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint208)5689_storage": {
              "label": "struct Checkpoints.Checkpoint208",
              "members": [
                {
                  "label": "_key",
                  "type": "t_uint48",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_uint208",
                  "offset": 6,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(EIP712Storage)2666_storage": {
              "label": "struct EIP712Upgradeable.EIP712Storage",
              "members": [
                {
                  "label": "_hashedName",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_hashedVersion",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_version",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(ERC20Storage)2233_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)2017_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(NoncesStorage)2599_storage": {
              "label": "struct NoncesUpgradeable.NoncesStorage",
              "members": [
                {
                  "label": "_nonces",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Trace208)5684_storage": {
              "label": "struct Checkpoints.Trace208",
              "members": [
                {
                  "label": "_checkpoints",
                  "type": "t_array(t_struct(Checkpoint208)5689_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(VotesStorage)1822_storage": {
              "label": "struct VotesUpgradeable.VotesStorage",
              "members": [
                {
                  "label": "_delegatee",
                  "type": "t_mapping(t_address,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_delegateCheckpoints",
                  "type": "t_mapping(t_address,t_struct(Trace208)5684_storage)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalCheckpoints",
                  "type": "t_struct(Trace208)5684_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint208": {
              "label": "uint208",
              "numberOfBytes": "26"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint48": {
              "label": "uint48",
              "numberOfBytes": "6"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Votes": [
              {
                "contract": "VotesUpgradeable",
                "label": "_delegatee",
                "type": "t_mapping(t_address,t_address)",
                "src": "@openzeppelin/contracts-upgradeable/governance/utils/VotesUpgradeable.sol:41",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "VotesUpgradeable",
                "label": "_delegateCheckpoints",
                "type": "t_mapping(t_address,t_struct(Trace208)5684_storage)",
                "src": "@openzeppelin/contracts-upgradeable/governance/utils/VotesUpgradeable.sol:43",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "VotesUpgradeable",
                "label": "_totalCheckpoints",
                "type": "t_struct(Trace208)5684_storage",
                "src": "@openzeppelin/contracts-upgradeable/governance/utils/VotesUpgradeable.sol:45",
                "offset": 0,
                "slot": "2"
              }
            ],
            "erc7201:openzeppelin.storage.Nonces": [
              {
                "contract": "NoncesUpgradeable",
                "label": "_nonces",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:17",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:38",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43",
                "offset": 0,
                "slot": "3"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol:ERC721HolderUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol:16",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)2017_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)2017_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:NoncesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:9",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "nonces(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)2017_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(NoncesStorage)2599_storage": {
              "label": "struct NoncesUpgradeable.NoncesStorage",
              "members": [
                {
                  "label": "_nonces",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Nonces": [
              {
                "contract": "NoncesUpgradeable",
                "label": "_nonces",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:17",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:31",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils"
        ],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(EIP712Storage)2666_storage": {
              "label": "struct EIP712Upgradeable.EIP712Storage",
              "members": [
                {
                  "label": "_hashedName",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_hashedVersion",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_version",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(InitializableStorage)2017_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:38",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43",
                "offset": 0,
                "slot": "3"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)2017_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor": {
        "src": "@openzeppelin/contracts/governance/IGovernor.sol:15",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "version()",
          "COUNTING_MODE()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "getProposalId(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalThreshold()",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "proposalProposer(uint256)",
          "proposalEta(uint256)",
          "proposalNeedsQueuing(uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "getVotesWithParams(address,uint256,bytes)",
          "hasVoted(uint256,address)",
          "propose(address[],uint256[],bytes[],string)",
          "queue(address[],uint256[],bytes[],bytes32)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "cancel(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteWithReasonAndParams(uint256,uint8,string,bytes)",
          "castVoteBySig(uint256,uint8,address,bytes)",
          "castVoteWithReasonAndParamsBySig(uint256,uint8,address,string,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/governance/utils/IVotes.sol:IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/IERC1271.sol:IERC1271": {
        "src": "@openzeppelin/contracts/interfaces/IERC1271.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267": {
        "src": "@openzeppelin/contracts/interfaces/IERC5267.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/IERC5805.sol:IERC5805": {
        "src": "@openzeppelin/contracts/interfaces/IERC5805.sol:9",
        "inherit": [
          "@openzeppelin/contracts/governance/utils/IVotes.sol:IVotes",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372": {
        "src": "@openzeppelin/contracts/interfaces/IERC6372.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "clock()",
          "CLOCK_MODE()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/IERC7913.sol:IERC7913SignatureVerifier": {
        "src": "@openzeppelin/contracts/interfaces/IERC7913.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "verify(bytes,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:15",
        "version": {
          "withMetadata": "56ee0eb09d5d1ca10f12f6c8db4d9bb0b58a586fd4536e2fe01625d883398b1a",
          "withoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312",
          "linkedWithoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:12",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "fdcfbcd51056991ca4fc5c041797278012656b7137e3b2d64aee66d0aac53d93",
          "withoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312",
          "linkedWithoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Bytes.sol:Bytes": {
        "src": "@openzeppelin/contracts/utils/Bytes.sol:11",
        "version": {
          "withMetadata": "3c7612a4338c9b9fdda91ea503d0a3571e40c4bcd5378273e58e1de7483b1cf7",
          "withoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312",
          "linkedWithoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "7dd9b30bd880407f25b01c4ff198d252c5d30aca989aadf6d21bcf513c041f27",
          "withoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312",
          "linkedWithoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "812f383b2bef442060892399db265dc1135eb9ac31ec9cf496ef5cabcf819d49",
          "withoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312",
          "linkedWithoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "938cdd059fa2d2f0ce5e26114dde9e6a3087df0c5d118dd7476dc370e1939545",
          "withoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312",
          "linkedWithoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:13",
        "version": {
          "withMetadata": "4998a33a79503f894e289356a1a97a640f1d6cc41a77d750e58e3844ff7a0753",
          "withoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312",
          "linkedWithoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:12",
        "version": {
          "withMetadata": "fa0f2f783accb6e8f392973b64a56e1bdfa7ca89de6465383e0d1438f2e91fd2",
          "withoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312",
          "linkedWithoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils": {
        "src": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:15",
        "version": {
          "withMetadata": "962cbff0855d62cb307cc8d3ca7e12327e9c454281ddd15f016cda04b15157e0",
          "withoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312",
          "linkedWithoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol:SignatureChecker": {
        "src": "@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol:20",
        "version": {
          "withMetadata": "f5083170442882cb2ddcbbfd4611a73a7be636a3ddf11472299c3d63d100c9e3",
          "withoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312",
          "linkedWithoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Bytes.sol:Bytes",
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "3ab901a651920c306bfc7adc3e2427556fabfa74fb413555ced759dbc2954ddc",
          "withoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312",
          "linkedWithoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "4ffdfc39770bd550675534715e4f6d85d67f8181990be0b2abe22a82453cc18a",
          "withoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312",
          "linkedWithoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:11",
        "version": {
          "withMetadata": "efec08445c1cdf4eec6fa412a66dd210a6229c64e0a1654efa381bb2d6612c53",
          "withoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312",
          "linkedWithoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/structs/Checkpoints.sol:Checkpoints": {
        "src": "@openzeppelin/contracts/utils/structs/Checkpoints.sol:16",
        "version": {
          "withMetadata": "ba7673522c35eb6c28e110bd50fecfb627750c40edbab334146b902788a12684",
          "withoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312",
          "linkedWithoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol:DoubleEndedQueue": {
        "src": "@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol:19",
        "version": {
          "withMetadata": "1afa89143824ac5548da4f6d2129f78f0657481e3c62f3ca1ffbdfa31f0ca381",
          "withoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312",
          "linkedWithoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/types/Time.sol:Time": {
        "src": "@openzeppelin/contracts/utils/types/Time.sol:20",
        "version": {
          "withMetadata": "35a6d21b4c6faa895bcbe204c7ffdc4e9696077a09d439476902963c19af9747",
          "withoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312",
          "linkedWithoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/types/Time.sol:Time",
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/NektakGovernorUpgradeable.sol:NektakGovernorUpgradeable": {
        "src": "contracts/NektakGovernorUpgradeable.sol:15",
        "version": {
          "withMetadata": "675bb4ad510f872ce3f545ed4e0b7c9d215b1f6b77695eec0dd93e5e481aae42",
          "withoutMetadata": "67db70e114e84d1eb91914fe36446edac369c98bdb233fdc393fb176c3408197",
          "linkedWithoutMetadata": "67db70e114e84d1eb91914fe36446edac369c98bdb233fdc393fb176c3408197"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorTimelockControlUpgradeable.sol:GovernorTimelockControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesQuorumFractionUpgradeable.sol:GovernorVotesQuorumFractionUpgradeable",
          "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesUpgradeable.sol:GovernorVotesUpgradeable",
          "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorCountingSimpleUpgradeable.sol:GovernorCountingSimpleUpgradeable",
          "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorSettingsUpgradeable.sol:GovernorSettingsUpgradeable",
          "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:GovernorUpgradeable",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:NoncesUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address,address payable)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "state(uint256)",
          "proposalThreshold()",
          "proposalNeedsQueuing(uint256)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NektakGovernorUpgradeable",
            "src": "contracts/NektakGovernorUpgradeable.sol:25"
          }
        ],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Checkpoint208)5689_storage)dyn_storage": {
              "label": "struct Checkpoints.Checkpoint208[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC5805)3273": {
              "label": "contract IERC5805",
              "numberOfBytes": "20"
            },
            "t_contract(TimelockControllerUpgradeable)1229": {
              "label": "contract TimelockControllerUpgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint128,t_bytes32)": {
              "label": "mapping(uint128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)278_storage)": {
              "label": "mapping(uint256 => struct GovernorUpgradeable.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalVote)1256_storage)": {
              "label": "mapping(uint256 => struct GovernorCountingSimpleUpgradeable.ProposalVote)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)6014_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_uint128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Checkpoint208)5689_storage": {
              "label": "struct Checkpoints.Checkpoint208",
              "members": [
                {
                  "label": "_key",
                  "type": "t_uint48",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_uint208",
                  "offset": 6,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(EIP712Storage)2666_storage": {
              "label": "struct EIP712Upgradeable.EIP712Storage",
              "members": [
                {
                  "label": "_hashedName",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_hashedVersion",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_version",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(GovernorCountingSimpleStorage)1263_storage": {
              "label": "struct GovernorCountingSimpleUpgradeable.GovernorCountingSimpleStorage",
              "members": [
                {
                  "label": "_proposalVotes",
                  "type": "t_mapping(t_uint256,t_struct(ProposalVote)1256_storage)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(GovernorSettingsStorage)1361_storage": {
              "label": "struct GovernorSettingsUpgradeable.GovernorSettingsStorage",
              "members": [
                {
                  "label": "_proposalThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_votingDelay",
                  "type": "t_uint48",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_votingPeriod",
                  "type": "t_uint32",
                  "offset": 6,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(GovernorStorage)310_storage": {
              "label": "struct GovernorUpgradeable.GovernorStorage",
              "members": [
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_proposals",
                  "type": "t_mapping(t_uint256,t_struct(ProposalCore)278_storage)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_governanceCall",
                  "type": "t_struct(Bytes32Deque)6014_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(GovernorTimelockControlStorage)1471_storage": {
              "label": "struct GovernorTimelockControlUpgradeable.GovernorTimelockControlStorage",
              "members": [
                {
                  "label": "_timelock",
                  "type": "t_contract(TimelockControllerUpgradeable)1229",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_timelockIds",
                  "type": "t_mapping(t_uint256,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(GovernorVotesQuorumFractionStorage)1623_storage": {
              "label": "struct GovernorVotesQuorumFractionUpgradeable.GovernorVotesQuorumFractionStorage",
              "members": [
                {
                  "label": "_quorumNumeratorHistory",
                  "type": "t_struct(Trace208)5684_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(GovernorVotesStorage)1716_storage": {
              "label": "struct GovernorVotesUpgradeable.GovernorVotesStorage",
              "members": [
                {
                  "label": "_token",
                  "type": "t_contract(IERC5805)3273",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)2017_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(NoncesStorage)2599_storage": {
              "label": "struct NoncesUpgradeable.NoncesStorage",
              "members": [
                {
                  "label": "_nonces",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ProposalCore)278_storage": {
              "label": "struct GovernorUpgradeable.ProposalCore",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voteStart",
                  "type": "t_uint48",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "voteDuration",
                  "type": "t_uint32",
                  "offset": 26,
                  "slot": "0"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 30,
                  "slot": "0"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 31,
                  "slot": "0"
                },
                {
                  "label": "etaSeconds",
                  "type": "t_uint48",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalVote)1256_storage": {
              "label": "struct GovernorCountingSimpleUpgradeable.ProposalVote",
              "members": [
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "hasVoted",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Trace208)5684_storage": {
              "label": "struct Checkpoints.Trace208",
              "members": [
                {
                  "label": "_checkpoints",
                  "type": "t_array(t_struct(Checkpoint208)5689_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint208": {
              "label": "uint208",
              "numberOfBytes": "26"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint48": {
              "label": "uint48",
              "numberOfBytes": "6"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.GovernorTimelockControl": [
              {
                "contract": "GovernorTimelockControlUpgradeable",
                "label": "_timelock",
                "type": "t_contract(TimelockControllerUpgradeable)1229",
                "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorTimelockControlUpgradeable.sol:29",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "GovernorTimelockControlUpgradeable",
                "label": "_timelockIds",
                "type": "t_mapping(t_uint256,t_bytes32)",
                "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorTimelockControlUpgradeable.sol:30",
                "offset": 0,
                "slot": "1"
              }
            ],
            "erc7201:openzeppelin.storage.GovernorVotesQuorumFraction": [
              {
                "contract": "GovernorVotesQuorumFractionUpgradeable",
                "label": "_quorumNumeratorHistory",
                "type": "t_struct(Trace208)5684_storage",
                "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesQuorumFractionUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.GovernorVotes": [
              {
                "contract": "GovernorVotesUpgradeable",
                "label": "_token",
                "type": "t_contract(IERC5805)3273",
                "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesUpgradeable.sol:19",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.GovernorCountingSimple": [
              {
                "contract": "GovernorCountingSimpleUpgradeable",
                "label": "_proposalVotes",
                "type": "t_mapping(t_uint256,t_struct(ProposalVote)1256_storage)",
                "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorCountingSimpleUpgradeable.sol:32",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.GovernorSettings": [
              {
                "contract": "GovernorSettingsUpgradeable",
                "label": "_proposalThreshold",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorSettingsUpgradeable.sol:17",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "GovernorSettingsUpgradeable",
                "label": "_votingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorSettingsUpgradeable.sol:19",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "GovernorSettingsUpgradeable",
                "label": "_votingPeriod",
                "type": "t_uint32",
                "src": "@openzeppelin/contracts-upgradeable/governance/extensions/GovernorSettingsUpgradeable.sol:21",
                "offset": 6,
                "slot": "1"
              }
            ],
            "erc7201:openzeppelin.storage.Governor": [
              {
                "contract": "GovernorUpgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:53",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "GovernorUpgradeable",
                "label": "_proposals",
                "type": "t_mapping(t_uint256,t_struct(ProposalCore)278_storage)",
                "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:55",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "GovernorUpgradeable",
                "label": "_governanceCall",
                "type": "t_struct(Bytes32Deque)6014_storage",
                "src": "@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol:61",
                "offset": 0,
                "slot": "2"
              }
            ],
            "erc7201:openzeppelin.storage.Nonces": [
              {
                "contract": "NoncesUpgradeable",
                "label": "_nonces",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:17",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:38",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43",
                "offset": 0,
                "slot": "3"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "contracts/NektakTokenUpgradeable.sol:NektakTokenUpgradeable": {
        "src": "contracts/NektakTokenUpgradeable.sol:13",
        "version": {
          "withMetadata": "a79d839691997f783017dff55bcb978715c42f37d19e328fcaac053c83203a73",
          "withoutMetadata": "9a74afca190f3f2225770c7dd011badc5fdd93e472cecb167282b12dda1112a3",
          "linkedWithoutMetadata": "9a74afca190f3f2225770c7dd011badc5fdd93e472cecb167282b12dda1112a3"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:ERC20VotesUpgradeable",
          "@openzeppelin/contracts-upgradeable/governance/utils/VotesUpgradeable.sol:VotesUpgradeable",
          "@openzeppelin/contracts/interfaces/IERC5805.sol:IERC5805",
          "@openzeppelin/contracts/governance/utils/IVotes.sol:IVotes",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:NoncesUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(string,string)",
          "mint(address,uint256)",
          "nonces(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Checkpoint208)5689_storage)dyn_storage": {
              "label": "struct Checkpoints.Checkpoint208[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Trace208)5684_storage)": {
              "label": "mapping(address => struct Checkpoints.Trace208)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint208)5689_storage": {
              "label": "struct Checkpoints.Checkpoint208",
              "members": [
                {
                  "label": "_key",
                  "type": "t_uint48",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_uint208",
                  "offset": 6,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(EIP712Storage)2666_storage": {
              "label": "struct EIP712Upgradeable.EIP712Storage",
              "members": [
                {
                  "label": "_hashedName",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_hashedVersion",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_version",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(ERC20Storage)2233_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)2017_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(NoncesStorage)2599_storage": {
              "label": "struct NoncesUpgradeable.NoncesStorage",
              "members": [
                {
                  "label": "_nonces",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)153_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Trace208)5684_storage": {
              "label": "struct Checkpoints.Trace208",
              "members": [
                {
                  "label": "_checkpoints",
                  "type": "t_array(t_struct(Checkpoint208)5689_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(VotesStorage)1822_storage": {
              "label": "struct VotesUpgradeable.VotesStorage",
              "members": [
                {
                  "label": "_delegatee",
                  "type": "t_mapping(t_address,t_address)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_delegateCheckpoints",
                  "type": "t_mapping(t_address,t_struct(Trace208)5684_storage)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalCheckpoints",
                  "type": "t_struct(Trace208)5684_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint208": {
              "label": "uint208",
              "numberOfBytes": "26"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint48": {
              "label": "uint48",
              "numberOfBytes": "6"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Votes": [
              {
                "contract": "VotesUpgradeable",
                "label": "_delegatee",
                "type": "t_mapping(t_address,t_address)",
                "src": "@openzeppelin/contracts-upgradeable/governance/utils/VotesUpgradeable.sol:41",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "VotesUpgradeable",
                "label": "_delegateCheckpoints",
                "type": "t_mapping(t_address,t_struct(Trace208)5684_storage)",
                "src": "@openzeppelin/contracts-upgradeable/governance/utils/VotesUpgradeable.sol:43",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "VotesUpgradeable",
                "label": "_totalCheckpoints",
                "type": "t_struct(Trace208)5684_storage",
                "src": "@openzeppelin/contracts-upgradeable/governance/utils/VotesUpgradeable.sol:45",
                "offset": 0,
                "slot": "2"
              }
            ],
            "erc7201:openzeppelin.storage.Nonces": [
              {
                "contract": "NoncesUpgradeable",
                "label": "_nonces",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:17",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:38",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43",
                "offset": 0,
                "slot": "3"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "contracts/TimelockControllerUpgradeable.sol:TimelockControllerUpgradeableUUPS": {
        "src": "contracts/TimelockControllerUpgradeable.sol:12",
        "version": {
          "withMetadata": "f124f008ae0f3894459456a0a8faa0e79b9bcc0fabc67917cb8411e86fa23ce9",
          "withoutMetadata": "90dd06c25946eac4570f2ac0ad773d671eb896f86c9bbf807c211a215b2a3c01",
          "linkedWithoutMetadata": "90dd06c25946eac4570f2ac0ad773d671eb896f86c9bbf807c211a215b2a3c01"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/governance/TimelockControllerUpgradeable.sol:TimelockControllerUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:ERC1155HolderUpgradeable",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol:ERC721HolderUpgradeable",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(uint256,address[],address[],address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)26_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AccessControlStorage)36_storage": {
              "label": "struct AccessControlUpgradeable.AccessControlStorage",
              "members": [
                {
                  "label": "_roles",
                  "type": "t_mapping(t_bytes32,t_struct(RoleData)26_storage)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)2017_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)26_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(TimelockControllerStorage)946_storage": {
              "label": "struct TimelockControllerUpgradeable.TimelockControllerStorage",
              "members": [
                {
                  "label": "_timestamps",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_minDelay",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.TimelockController": [
              {
                "contract": "TimelockControllerUpgradeable",
                "label": "_timestamps",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/governance/TimelockControllerUpgradeable.sol:34",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "TimelockControllerUpgradeable",
                "label": "_minDelay",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/governance/TimelockControllerUpgradeable.sol:35",
                "offset": 0,
                "slot": "1"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)26_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      }
    }
  ]
}